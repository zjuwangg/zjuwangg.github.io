<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Terry1897's blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://zjuwangg.github.io/"/>
  <updated>2015-12-16T17:26:42.000Z</updated>
  <id>http://zjuwangg.github.io/</id>
  
  <author>
    <name><![CDATA[zjuwangg]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[python高级特性(待补充)]]></title>
    <link href="http://zjuwangg.github.io/2015/12/17/python%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/"/>
    <id>http://zjuwangg.github.io/2015/12/17/python高级特性/</id>
    <published>2015-12-16T16:59:58.000Z</published>
    <updated>2015-12-16T17:26:42.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u5217_u8868_u64CD_u4F5C_3A"><a href="#u5217_u8868_u64CD_u4F5C_3A" class="headerlink" title="列表操作:"></a>列表操作:</h3><ul>
<li><p>切片:</p>
</li>
<li><p>迭代:</p>
<ul>
<li><em>如何判断一个对象是否可迭代</em><br>  使用collections模块的Iterable类型判断</li>
</ul>
</li>
</ul>
<pre><code>        &gt;&gt;&gt; from collections import Iterarble
        &gt;&gt;&gt; isinstance(&apos;abc&apos;,Iterable)        

* list 迭代:

        # 不带下表
        for i in range(10)
            pass
        # 访问对应下标
        for i,value in enumerate([&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]):
            print i,value
* dict 迭代:  

        d = {&apos;a&apos;:1,&apos;b&apos;:2}
        for key in d:
            print key + &apos;:&apos; + str(d[key])
</code></pre><ul>
<li><p>列表生成式:</p>
</li>
<li><p>生成器:</p>
</li>
</ul>
<h3 id="u51FD_u6570_u5F0F_u7F16_u7A0B_3A"><a href="#u51FD_u6570_u5F0F_u7F16_u7A0B_3A" class="headerlink" title="函数式编程:"></a>函数式编程:</h3><ul>
<li><p>高阶函数:</p>
<ul>
<li>map</li>
<li>reduce</li>
<li>filter</li>
<li>sorted? 这个不算高阶函数吧</li>
</ul>
</li>
<li><p>返回函数:</p>
<ul>
<li>函数作为返回值</li>
<li>闭包性   </li>
</ul>
</li>
<li><p>匿名函数(lambda):</p>
<pre><code>lambda x,y:x+y
</code></pre></li>
<li><p>装饰器:</p>
<blockquote>
<p>代码运行期间动态增加功能,类似java Spring中AOP的功能</p>
</blockquote>
<pre><code>def log(func):
    def wraaper(*args,**kw):
        print &apos;call %s()&apos; % func.__name__
        return wraaper
    return wrapper

@log
def now():
    print &apos;2015-12-09&apos;
</code></pre><p>  相当于执行 <code>now = log(now)</code>  也就是说现在的now指向了一个新的封装后的函数</p>
</li>
<li><p>偏函数:</p>
<ul>
<li>functools.partial 的内置函数,相当于利用了返回函数的闭包和类装饰模式的原理来固定函数的参数</li>
</ul>
</li>
</ul>
<h3 id="u9762_u5411_u5BF9_u8C61_u7F16_u7A0B"><a href="#u9762_u5411_u5BF9_u8C61_u7F16_u7A0B" class="headerlink" title="面向对象编程"></a>面向对象编程</h3><ul>
<li>使用<strong>slots</strong><ul>
<li>限制实例可以添加的属性类型</li>
</ul>
</li>
<li>使用@property<ul>
<li>s</li>
</ul>
</li>
<li>多重继承</li>
<li>定制类</li>
<li>使用元类<ul>
<li>type</li>
<li>metaclass</li>
</ul>
</li>
</ul>
<p><a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/0014186131194415d50558b7a1c424f9fb52b84dc9c965c000" target="_blank" rel="external">参考链接:</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u5217_u8868_u64CD_u4F5C_3A"><a href="#u5217_u8868_u64CD_u4F5C_3A" class="headerlink" title="列表操作:"></a>列表操作:</h3><ul>
<li><p>切片:</p>]]>
    </summary>
    
      <category term="python" scheme="http://zjuwangg.github.io/tags/python/"/>
    
  </entry>
  
</feed>
