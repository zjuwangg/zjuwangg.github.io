<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Terry Go Go!]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://zjuwangg.github.io/"/>
  <updated>2015-12-28T16:45:35.000Z</updated>
  <id>http://zjuwangg.github.io/</id>
  
  <author>
    <name><![CDATA[zjuwangg]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[2015年末总结]]></title>
    <link href="http://zjuwangg.github.io/2015/12/29/2015%E5%B9%B4%E6%9C%AB%E6%80%BB%E7%BB%93/"/>
    <id>http://zjuwangg.github.io/2015/12/29/2015年末总结/</id>
    <published>2015-12-28T16:42:43.000Z</published>
    <updated>2015-12-28T16:45:35.000Z</updated>
    <content type="html"><![CDATA[<p>　　本周内填坑，今天太晚了，先去睡觉。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　本周内填坑，今天太晚了，先去睡觉。</p>
]]>
    </summary>
    
      <category term="反思" scheme="http://zjuwangg.github.io/tags/%E5%8F%8D%E6%80%9D/"/>
    
      <category term="成长" scheme="http://zjuwangg.github.io/tags/%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[python高级特性(待补充)]]></title>
    <link href="http://zjuwangg.github.io/2015/12/17/python%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/"/>
    <id>http://zjuwangg.github.io/2015/12/17/python高级特性/</id>
    <published>2015-12-16T16:59:58.000Z</published>
    <updated>2015-12-28T16:44:06.000Z</updated>
    <content type="html"><![CDATA[<p>　　断断续续接触python也有半年了，因为使用场景有限，大多止步与写个方便工作的脚本或者利用scrapy框架写写简单的爬虫。最近着重学习了python一些高阶的属性，将这些特性和简单的操作示例记录下来，一来作为温习，二为防止将来遗忘可做参考。<br>　　先列下提纲，慢慢填坑。。。</p>
<a id="more"></a> 
<h4 id="u5217_u8868_u64CD_u4F5C_3A"><a href="#u5217_u8868_u64CD_u4F5C_3A" class="headerlink" title="列表操作:"></a>列表操作:</h4><ul>
<li><p>切片:</p>
</li>
<li><p>迭代:</p>
<ul>
<li><p>如何判断一个对象是否可迭代<br>使用collections模块的Iterable类型判断</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterarble</span><br><span class="line">isinstance(<span class="string">'abc'</span>,Iterable)</span><br></pre></td></tr></table></figure>
</li>
<li><p>list 迭代:    </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不带下表</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)</span><br><span class="line">	<span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 访问对应下标</span></span><br><span class="line"><span class="keyword">for</span> i,value <span class="keyword">in</span> enumerate([<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]):</span><br><span class="line">	<span class="keyword">print</span> i,value</span><br></pre></td></tr></table></figure>
</li>
<li><p>dict 迭代:  </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> d:</span><br><span class="line">	<span class="keyword">print</span> key + <span class="string">':'</span> + str(d[key])</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>列表生成式:</p>
</li>
<li><p>生成器:</p>
</li>
</ul>
<h4 id="u51FD_u6570_u5F0F_u7F16_u7A0B_3A"><a href="#u51FD_u6570_u5F0F_u7F16_u7A0B_3A" class="headerlink" title="函数式编程:"></a>函数式编程:</h4><ul>
<li><p>高阶函数:</p>
<ul>
<li>map</li>
<li>reduce</li>
<li>filter</li>
<li>sorted? 这个不算高阶函数吧</li>
</ul>
</li>
<li><p>返回函数:</p>
<ul>
<li>函数作为返回值</li>
<li>闭包性   </li>
</ul>
</li>
<li><p>匿名函数(lambda):</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> x,y:x+y</span><br></pre></td></tr></table></figure>
</li>
<li><p>装饰器:</p>
<blockquote>
<p>代码运行期间动态增加功能,类似java Spring中AOP的功能</p>
</blockquote>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">wraaper</span><span class="params">(*args,**kw)</span>:</span></span><br><span class="line">		<span class="keyword">print</span> <span class="string">'call %s()'</span> % func.__name__</span><br><span class="line">		<span class="keyword">return</span> wraaper</span><br><span class="line">	<span class="keyword">return</span> wrapper</span><br><span class="line">	</span><br><span class="line"><span class="decorator">@log</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></span><br><span class="line">	<span class="keyword">print</span> <span class="string">'2015-12-09'</span></span><br></pre></td></tr></table></figure>
<p>相当于执行 <code>now = log(now)</code>  也就是说现在的now指向了一个新的封装后的函数</p>
<ul>
<li><p>偏函数:</p>
<ul>
<li>functools.partial 的内置函数,相当于利用了返回函数的闭包和类装饰模式的原理来固定函数的参数</li>
</ul>
</li>
</ul>
<h3 id="u9762_u5411_u5BF9_u8C61_u7F16_u7A0B"><a href="#u9762_u5411_u5BF9_u8C61_u7F16_u7A0B" class="headerlink" title="面向对象编程"></a>面向对象编程</h3><ul>
<li>使用<strong>slots</strong><ul>
<li>限制实例可以添加的属性类型</li>
</ul>
</li>
<li>使用@property<ul>
<li></li>
</ul>
</li>
<li>多重继承</li>
<li>定制类</li>
<li>使用元类<ul>
<li>type</li>
<li>metaclass</li>
</ul>
</li>
</ul>
<p><a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/0014186131194415d50558b7a1c424f9fb52b84dc9c965c000" target="_blank" rel="external">参考链接:</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　断断续续接触python也有半年了，因为使用场景有限，大多止步与写个方便工作的脚本或者利用scrapy框架写写简单的爬虫。最近着重学习了python一些高阶的属性，将这些特性和简单的操作示例记录下来，一来作为温习，二为防止将来遗忘可做参考。<br>　　先列下提纲，慢慢填坑。。。</p>]]>
    
    </summary>
    
      <category term="python" scheme="http://zjuwangg.github.io/tags/python/"/>
    
  </entry>
  
</feed>
